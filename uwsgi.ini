[uwsgi]
module = run:app
http-socket = 0.0.0.0:5000

strict = true
master = true
; processes  = 2
enable-threads = true
vacuum = true 
single-interpreter = true
die-on-term = true
need-app = true

buffer-size = 16384

; logformat = {"pid":"%(pid)", "remote_addr": "%(addr)", "method":"%(method)", "uri": "%(uri)", "status":%(status),"timestamp":%(time), "response_time_msec":%(msecs), "response_size":%(size), "request_body_size":%(cl), "memory_usage_bytes": %(vsz)}
; logger = file:logfile=/app/module.log,maxsize=2000000
; log-reopen = true
disable-logging = true

; worker management
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 256                  ; Restart workers after this much resident memory (MB)
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers (seconds)

; Dynamic Worker Scaling

cheaper-algo = busyness              
processes = 4                       ; Maximum number of workers allowed
cheaper = 1                          ; Minimum number of workers allowed
cheaper-initial = 1                  ; Workers created at startup
cheaper-overload = 15                ; Length of a cycle in seconds
cheaper-step = 1                     ; How many workers to spawn at a time

cheaper-busyness-multiplier = 16     ; How many cycles to wait before killing workers
cheaper-busyness-min = 25            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 50            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue